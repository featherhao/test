#!/bin/bash
set -e

# ================== 显示已绑定的域名和端口 ==================
echo "🔎 正在检查 Nginx 中已绑定的域名..."

# 查找所有 sites-enabled 目录下的配置文件
# 遍历每个文件并提取信息
for conf_file in /etc/nginx/sites-enabled/*; do
    if [[ -f "$conf_file" ]]; then
        # 从文件中提取 server_name 和 proxy_pass
        domain=$(grep -Eo 'server_name\s+[^;]+;' "$conf_file" | sed -n 's/server_name\s\+\([^;]\+\);/\1/p' | xargs)
        port=$(grep -Eo 'proxy_pass\s+http://[^:]+:[0-9]+;' "$conf_file" | sed -n 's/proxy_pass\s\+http:\/\/[^:]\+:\([0-9]\+\);/\1/p' | xargs)
        
        # 仅当找到域名和端口时才显示
        if [[ -n "$domain" && -n "$port" ]]; then
            echo "✅ 域名: $domain -> 本地端口: $port"
        fi
    fi
done

echo "=========================================="

# ================== 获取公网 IP ==================
echo "🌐 正在获取公网 IP 地址..."

# 默认优先获取 IPv4
VPS_IP=$(curl -4 -fsSL https://api.ipify.org)
IP_VERSION="IPv4"

# 询问用户是否切换到 IPv6，如果用户直接回车则使用默认值
read -rp "默认使用 IPv4。是否要切换到 IPv6？(y/n，回车默认): " user_choice
if [[ "$user_choice" =~ ^[Yy]$ ]]; then
    VPS_IP=$(curl -6 -fsSL https://api64.ipify.org)
    IP_VERSION="IPv6"
elif [[ -z "$user_choice" ]]; then
    # 用户回车，保持默认值不变
    echo "⚡ 保持使用 IPv4"
fi

if [[ -z "$VPS_IP" ]]; then
    echo "⚠️ 获取公网 IP 失败，请检查网络。"
    VPS_IP="::1"
    IP_VERSION="Loopback"
fi
echo "🌐 VPS 公网 $IP_VERSION: $VPS_IP"

# ================== 检查并安装依赖 ==================
install_deps() {
    if ! command -v nginx &>/dev/null; then
        echo "📦 正在安装 nginx..."
        apt update -y && apt install -y nginx
        systemctl enable nginx --now
    fi

    if ! command -v certbot &>/dev/null; then
        echo "📦 正在安装 certbot..."
        apt install -y certbot python3-certbot-nginx
    fi
}
install_deps

# ================== 用户输入 ==================
read -rp "请输入你的域名（例如 example.com）: " DOMAIN
while [[ -z "$DOMAIN" ]]; do
    read -rp "域名不能为空，请重新输入: " DOMAIN
done

read -rp "请输入服务运行的本地端口（例如 8181）: " PORT
while [[ ! "$PORT" =~ ^[0-9]+$ ]]; do
    read -rp "端口格式错误，请重新输入: " PORT
done

# 自动生成随机邮箱
RANDOM_EMAIL="user$((RANDOM%100000))@random.com"
read -rp "请输入你的邮箱（用于 HTTPS 证书，留空则随机生成）: " EMAIL
if [[ -z "$EMAIL" ]]; then
    EMAIL="$RANDOM_EMAIL"
    echo "⚡ 使用随机邮箱: $EMAIL"
fi

# ================== 写入初始 nginx 配置 ==================
NGINX_CONF="/etc/nginx/sites-enabled/$DOMAIN"
mkdir -p "$(dirname "$NGINX_CONF")"

if [[ "$IP_VERSION" == "IPv4" ]]; then
    PROXY_PASS_IP="127.0.0.1"
else
    PROXY_PASS_IP="[::1]"
fi

# 写入临时的 HTTP 配置，用于 Certbot 验证
cat > "$NGINX_CONF" <<EOF
server {
    listen 80;
    listen [::]:80;
    server_name $DOMAIN;

    location / {
        proxy_pass http://$PROXY_PASS_IP:$PORT;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
}
EOF

echo "✅ 临时 HTTP 配置已写入 $NGINX_CONF"

# ================== 测试并重载 nginx ==================
if nginx -t; then
    systemctl reload nginx
    echo "🔹 nginx 配置测试通过，已重载 nginx"
else
    echo "⚠️ nginx 配置测试失败，请检查"
    exit 1
fi

# ================== 获取 HTTPS 证书并自动配置 ==================
if certbot --nginx -d "$DOMAIN" --email "$EMAIL" --agree-tos --non-interactive --redirect; then
    echo "✅ HTTPS 证书获取成功并自动配置"
    # Certbot 成功后，它会修改 Nginx 配置以添加 HTTPS 块和重定向
else
    echo "⚠️ 证书获取失败，请检查域名解析和 nginx 配置"
    # 如果证书获取失败，保留原始 HTTP 配置
fi

# ================== 最终输出 ==================
echo "=============================="
echo "域名 $DOMAIN 已绑定到本地端口: $PORT"
echo "HTTPS 已开启，可通过 https://$DOMAIN 访问（如果证书获取成功）"
echo "请确保 DNS **$IP_VERSION** 记录已解析到 VPS 公网 $IP_VERSION: $VPS_IP"
echo "=============================="

read -rp "按回车返回上一级菜单..." dummy
