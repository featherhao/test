#!/bin/bash
set -Eeuo pipefail

# ================== Áªü‰∏ÄÂ§±Ë¥•Â§ÑÁêÜ ==================
trap 'status=$?; line=${BASH_LINENO[0]}; echo -e "\e[31m‚ùå ÂèëÁîüÈîôËØØ (exit=$status) at line $line\e[0m" >&2' ERR

# ================== Âü∫Á°ÄÈÖçÁΩÆ ==================
SCRIPT_URL="https://raw.githubusercontent.com/featherhao/test/refs/heads/main/menu.sh"
SCRIPT_PATH="$HOME/menu.sh"

# ================== ÂΩ©Ëâ≤‰∏éÊó•Âøó ==================
if [[ -t 1 ]] && command -v tput &>/dev/null || true; then
    C_RESET="\e[0m"; C_BOLD="\e[1m"
    C_GREEN="\e[32m"; C_RED="\e[31m"; C_YELLOW="\e[33m"; C_BLUE="\e[34m"; C_CYAN="\e[36m"
else
    C_RESET=""; C_BOLD=""; C_GREEN=""; C_RED=""; C_YELLOW=""; C_BLUE=""; C_CYAN=""
fi

info()  { echo -e "${C_CYAN}[*]${C_RESET} $*"; }
warn()  { echo -e "${C_YELLOW}[!]${C_RESET} $*"; }
error() { echo -e "${C_RED}[x]${C_RESET} $*" >&2; }

print_header() {
    local title="$1"
    echo -e "${C_BOLD}==============================${C_RESET}"
    echo -e "  ${C_BOLD}${title}${C_RESET}"
    echo -e "${C_BOLD}==============================${C_RESET}"
}

render_menu() {
    local title="$1"; shift
    clear
    print_header "$title"
    for item in "$@"; do
        echo -e "$item"
    done
    echo "=============================="
}

fetch() { curl -fsSL --retry 3 --retry-delay 1 --connect-timeout 5 --max-time 30 "$@"; }
run_url() { bash <(fetch "$1"); }

# ================== Ëá™ÊàëÂàùÂßãÂåñ ==================
SCRIPT_IS_FIRST_RUN=false
if [[ "$0" == "/dev/fd/"* ]] || [[ "$0" == "bash" ]]; then
    info "‚ö° Ê£ÄÊµãÂà∞‰Ω†ÊòØÈÄöËøá <(curl ‚Ä¶) ‰∏¥Êó∂ËøêË°åÁöÑ"
    info "üëâ Ê≠£Âú®Ëá™Âä®‰øùÂ≠ò menu.sh Âà∞ $SCRIPT_PATH"
    curl -fsSL "${SCRIPT_URL}?t=$(date +%s)" -o "$SCRIPT_PATH"
    chmod +x "$SCRIPT_PATH"
    SCRIPT_IS_FIRST_RUN=true
    sleep 2
fi

# ================== Âø´Êç∑ÈîÆ q/Q ==================
set_q_shortcut_auto() {
    local shell_rc=""
    local script_cmd="bash ~/menu.sh"

    if command -v apk &>/dev/null; then
        shell_rc="$HOME/.profile"
        script_cmd="sh ~/menu.sh"
    elif [[ -n "${ZSH_VERSION:-}" ]]; then
        shell_rc="$HOME/.zshrc"
    else
        shell_rc="$HOME/.bashrc"
    fi

    if ! grep -q "alias Q='${script_cmd}'" "$shell_rc" 2>/dev/null; then
        echo "alias Q='${script_cmd}'" >> "$shell_rc"
        echo "alias q='${script_cmd}'" >> "$shell_rc"
        if $SCRIPT_IS_FIRST_RUN; then
            info "‚úÖ Â∑≤Ëá™Âä®ËÆæÁΩÆÂø´Êç∑ÈîÆÔºå‰∏ãÊ¨°ÂèØÁõ¥Êé•ËæìÂÖ• q Êàñ Q ËøêË°å„ÄÇ"
            info "üëâ ËØ∑ÊâßË°å 'source $shell_rc' ÊàñÈáçÂêØÁªàÁ´Ø‰ª•‰ΩøÂÖ∂ÁîüÊïà„ÄÇ"
        fi
    fi
}
set_q_shortcut_auto

# ================== docker compose ÂÖºÂÆπ ==================
if command -v docker-compose &>/dev/null; then
    COMPOSE="docker-compose"
else
    COMPOSE="docker compose"
fi

# ================== Â≠êËÑöÊú¨Ë∑ØÂæÑ ==================
WORKDIR_MOONTV="/opt/moontv"
MOONTV_SCRIPT="https://raw.githubusercontent.com/featherhao/test/refs/heads/main/SH/mootvinstall.sh"
WORKDIR_RUSTDESK="/opt/rustdesk"
RUSTDESK_SCRIPT="https://raw.githubusercontent.com/featherhao/test/refs/heads/main/SH/install_rustdesk.sh"
WORKDIR_LIBRETV="/opt/libretv"
LIBRETV_SCRIPT="https://raw.githubusercontent.com/featherhao/test/refs/heads/main/SH/install_libretv.sh"
ZJSYNC_SCRIPT="https://raw.githubusercontent.com/featherhao/test/refs/heads/main/SH/zjsync.sh"
NGINX_SCRIPT="https://raw.githubusercontent.com/featherhao/test/refs/heads/main/SH/nginx"
SUB_SCRIPT="https://raw.githubusercontent.com/featherhao/test/refs/heads/main/SH/subconverter-api.sh"
SHLINK_SCRIPT="https://raw.githubusercontent.com/featherhao/test/refs/heads/main/SH/install_shlink.sh"
ARGOSB_SCRIPT="https://raw.githubusercontent.com/featherhao/test/refs/heads/main/SH/argosb.sh"
PANSO_SCRIPT="https://raw.githubusercontent.com/featherhao/test/refs/heads/main/SH/pansou.sh"
POSTEIO_SCRIPT="https://raw.githubusercontent.com/featherhao/test/refs/heads/main/SH/Poste.io.sh"
WORKDIR_SEARXNG="/opt/searxng"
SEARXNG_SCRIPT="https://raw.githubusercontent.com/featherhao/test/refs/heads/main/SH/searxng.sh"
MTPROTO_SCRIPT="https://raw.githubusercontent.com/featherhao/test/refs/heads/main/SH/MTProto.sh"
SYSTEM_TOOL_SCRIPT="https://raw.githubusercontent.com/featherhao/test/refs/heads/main/SH/system_tool.sh"
CLEAN_VPS_SCRIPT="https://raw.githubusercontent.com/featherhao/test/refs/heads/main/SH/clean_vps.sh"
COSYVOICE_SCRIPT="https://raw.githubusercontent.com/featherhao/test/refs/heads/main/SH/cosyvoice.sh"

# ================== Â≠êËÑöÊú¨Ë∞ÉÁî®ÂáΩÊï∞ÔºàÊä•Èîô‰∏çÈÄÄÂá∫Ôºâ ==================
moon_menu()        { bash <(fetch "${MOONTV_SCRIPT}?t=$(date +%s)") || warn "MoonTV Â≠êËÑöÊú¨Êä•ÈîôÔºå‰ΩÜÂ∑≤ÂøΩÁï•"; }
rustdesk_menu()    { bash <(fetch "${RUSTDESK_SCRIPT}?t=$(date +%s)") || warn "RustDesk Â≠êËÑöÊú¨Êä•ÈîôÔºå‰ΩÜÂ∑≤ÂøΩÁï•"; }
libretv_menu()     { bash <(fetch "${LIBRETV_SCRIPT}?t=$(date +%s)") || warn "LibreTV Â≠êËÑöÊú¨Êä•ÈîôÔºå‰ΩÜÂ∑≤ÂøΩÁï•"; }
singbox_menu()     { bash <(fetch "https://raw.githubusercontent.com/yonggekkk/sing-box-yg/main/sb.sh") || warn "Sing-box Â≠êËÑöÊú¨Êä•ÈîôÔºå‰ΩÜÂ∑≤ÂøΩÁï•"; }
nginx_menu()       { bash <(fetch "${NGINX_SCRIPT}?t=$(date +%s)") || warn "Nginx Â≠êËÑöÊú¨Êä•ÈîôÔºå‰ΩÜÂ∑≤ÂøΩÁï•"; }
panso_menu()       { bash <(fetch "${PANSO_SCRIPT}?t=$(date +%s)") || warn "Pansou Â≠êËÑöÊú¨Êä•ÈîôÔºå‰ΩÜÂ∑≤ÂøΩÁï•"; }
zjsync_menu()      { bash <(fetch "${ZJSYNC_SCRIPT}?t=$(date +%s)") || warn "zjsync Â≠êËÑöÊú¨Êä•ÈîôÔºå‰ΩÜÂ∑≤ÂøΩÁï•"; }
subconverter_menu(){ bash <(fetch "${SUB_SCRIPT}?t=$(date +%s)") || warn "Subconverter Â≠êËÑöÊú¨Êä•ÈîôÔºå‰ΩÜÂ∑≤ÂøΩÁï•"; }
shlink_menu()      { bash <(fetch "${SHLINK_SCRIPT}?t=$(date +%s)") || warn "Shlink Â≠êËÑöÊú¨Êä•ÈîôÔºå‰ΩÜÂ∑≤ÂøΩÁï•"; }
argosb_menu()      { bash <(fetch "${ARGOSB_SCRIPT}?t=$(date +%s)") || warn "ArgoSB Â≠êËÑöÊú¨Êä•ÈîôÔºå‰ΩÜÂ∑≤ÂøΩÁï•"; }
posteio_menu()     { bash <(fetch "${POSTEIO_SCRIPT}?t=$(date +%s)") || warn "Poste.io Â≠êËÑöÊú¨Êä•ÈîôÔºå‰ΩÜÂ∑≤ÂøΩÁï•"; }
searxng_menu()     { bash <(fetch "${SEARXNG_SCRIPT}?t=$(date +%s)") || warn "SearxNG Â≠êËÑöÊú¨Êä•ÈîôÔºå‰ΩÜÂ∑≤ÂøΩÁï•"; }
mtproto_menu()     { bash <(fetch "${MTPROTO_SCRIPT}?t=$(date +%s)") || warn "MTProto Â≠êËÑöÊú¨Êä•ÈîôÔºå‰ΩÜÂ∑≤ÂøΩÁï•"; }
system_tool_menu(){ bash <(fetch "${SYSTEM_TOOL_SCRIPT}?t=$(date +%s)") || warn "Á≥ªÁªüÂ∑•ÂÖ∑Â≠êËÑöÊú¨Êä•ÈîôÔºå‰ΩÜÂ∑≤ÂøΩÁï•"; }
cosyvoice_menu()   { bash <(fetch "${COSYVOICE_SCRIPT}?t=$(date +%s)") || warn "CosyVoice Â≠êËÑöÊú¨Êä•ÈîôÔºå‰ΩÜÂ∑≤ÂøΩÁï•"; }

# ================== ‰∏ªËèúÂçïÂæ™ÁéØ ==================
while true; do
    # Áä∂ÊÄÅÊ£ÄÊµã
    moon_status=$([[ -d /opt/moontv ]] && echo "${C_GREEN}‚úÖ Â∑≤ÂÆâË£Ö${C_RESET}" || echo "‚ùå Êú™ÂÆâË£Ö")
    rustdesk_status=$([[ -d /opt/rustdesk ]] && echo "${C_GREEN}‚úÖ Â∑≤ÂÆâË£Ö${C_RESET}" || echo "‚ùå Êú™ÂÆâË£Ö")
    libretv_status=$([[ -d /opt/libretv ]] && echo "${C_GREEN}‚úÖ Â∑≤ÂÆâË£Ö${C_RESET}" || echo "‚ùå Êú™ÂÆâË£Ö")
    singbox_status=$([[ -x "$(command -v sing-box)" || -x "$(command -v sb)" ]] && echo "${C_GREEN}‚úÖ Â∑≤ÂÆâË£Ö${C_RESET}" || echo "‚ùå Êú™ÂÆâË£Ö")

    argosb_status=$([[ -f "/opt/argosb/installed.flag" ]] && echo "‚úÖ Â∑≤ÂÆâË£Ö (Ê†áËÆ∞Êñá‰ª∂)" || echo "‚ùå Êú™ÂÆâË£Ö")
    panso_status=$(check_docker_service "pansou-web")
    zjsync_status=$([[ -f /etc/zjsync.conf ]] && echo "${C_GREEN}‚úÖ Â∑≤ÈÖçÁΩÆ${C_RESET}" || echo "‚ùå Êú™ÈÖçÁΩÆ")
    subconverter_status=$(check_docker_service "subconverter")
    shlink_status=$(check_docker_service "shlink")
    posteio_status=$(check_docker_service "posteio")
    searxng_status=$(check_docker_service "searxng")

    render_menu "üöÄ ÊúçÂä°ÁÆ°ÁêÜ‰∏≠ÂøÉ" \
        "1) MoonTV ÂÆâË£Ö                 $moon_status" \
        "2) RustDesk ÂÆâË£Ö               $rustdesk_status" \
        "3) LibreTV ÂÆâË£Ö                $libretv_status" \
        "4) Áî¨Âì•Sing-box-ygÂÆâË£Ö           $singbox_status" \
        "5) ÂãáÂì•ArgoSBËÑöÊú¨                $argosb_status" \
        "6) Kejilion.sh ‰∏ÄÈîÆËÑöÊú¨Â∑•ÂÖ∑ÁÆ±     ‚ö° ËøúÁ®ãË∞ÉÁî®" \
        "7) zjsyncÔºàGitHub Êñá‰ª∂Ëá™Âä®ÂêåÊ≠•Ôºâ   $zjsync_status" \
        "8) Pansou ÁΩëÁõòÊêúÁ¥¢               $panso_status" \
        "9) ÂüüÂêçÁªëÂÆöÁÆ°ÁêÜ                  ‚ö° ËøúÁ®ãË∞ÉÁî®" \
        "10) Subconverter APIÂêéÁ´Ø         $subconverter_status" \
        "11) Poste.io ÈÇÆ‰ª∂ÊúçÂä°Âô®          $posteio_status" \
        "12) Shlink Áü≠ÈìæÊé•ÁîüÊàê            $shlink_status" \
        "13) SearxNG ‰∏ÄÈîÆÂÆâË£Ö/Âç∏ËΩΩ        $searxng_status" \
        "14) Telegram MTProto ‰ª£ÁêÜ         $(mtproto_status)" \
        "15) CosyVoice ÊñáÊú¨ËΩ¨ËØ≠Èü≥          $(check_docker_service "cov")" \
        "16) Á≥ªÁªüÂ∑•ÂÖ∑ÔºàSwap ÁÆ°ÁêÜ + ‰∏ªÊú∫Âêç‰øÆÊîπÔºâ ‚ö°" \
        "00) Êõ¥Êñ∞ËèúÂçïËÑöÊú¨ menu.sh" \
        "0) ÈÄÄÂá∫" \
        "" \
        "ÊèêÁ§∫ÔºöÊ≠§ËÑöÊú¨Â∑≤Ëá™Âä®ËÆæÁΩÆ q Êàñ Q Âø´Êç∑ÈîÆÔºå‰∏ãÊ¨°Áõ¥Êé•ËæìÂÖ•Âç≥ÂèØËøêË°å"

    read -rp "ËØ∑ËæìÂÖ•ÈÄâÈ°π: " main_choice
    case "${main_choice}" in
        1) moon_menu ;;
        2) rustdesk_menu ;;
        3) libretv_menu ;;
        4) singbox_menu ;;
        5) argosb_menu ;;
        6) bash <(fetch "https://raw.githubusercontent.com/kejilion/sh/main/kejilion.sh") || warn "ËøúÁ®ãÂ∑•ÂÖ∑Êä•Èîô";;
        7) zjsync_menu ;;
        8) panso_menu ;;
        9) nginx_menu ;;
        10) subconverter_menu ;;
        11) posteio_menu ;;
        12) shlink_menu ;;
        13) searxng_menu ;;
        14) mtproto_menu ;;
        15) cosyvoice_menu ;;
        16) system_tool_menu ;;
        00) update_menu_script ;;
        0) exit 0 ;;
        *) error "‚ùå Êó†ÊïàËæìÂÖ•" ;;
    esac
    read -rp "ÊåâÂõûËΩ¶ËøîÂõû‰∏ªËèúÂçï‚Ä¶"  # Á≠âÂæÖÁî®Êà∑Á°ÆËÆ§ÂÜçÂà∑Êñ∞
done
